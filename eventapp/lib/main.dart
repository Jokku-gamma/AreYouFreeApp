import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:google_fonts/google_fonts.dart'; // For a cooler font
import './firebase_options.dart'; // Auto-generated Firebase options

import './screens/login_screen.dart'; // Import your login screen
import './screens/host_dashboard.dart';
import './screens/student_dashboard.dart';
import './screens/guest_dashboard.dart';

import './services/firebase_service.dart'; // For user role checking
import './utils/constants.dart'; // For UserRole enum and AppColors

void main() async {
  // Ensure Flutter widgets are initialized before Firebase
  WidgetsFlutterBinding.ensureInitialized(); // Always add this line

  // Initialize Firebase with the options generated by FlutterFire CLI
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final FirebaseService _firebaseService = FirebaseService(); // Instantiate FirebaseService

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Graduates Meeting App',
      debugShowCheckedModeBanner: false, // Hide debug banner
      theme: ThemeData(
        primarySwatch: Colors.deepPurple, // A nice primary color
        // Apply Google Fonts for a modern look
        textTheme: GoogleFonts.interTextTheme(
          Theme.of(context).textTheme,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: AppColors.primaryColor, // Using AppColors
          foregroundColor: Colors.white,
          elevation: 0,
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadius.vertical(
              bottom: Radius.circular(20), // Rounded bottom corners for AppBar
            ),
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: AppColors.primaryColor, // Using AppColors
            foregroundColor: Colors.white,
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(12), // Rounded buttons
            ),
            padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15),
            textStyle: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
        ),
        cardTheme: CardThemeData(
          elevation: 5,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15), // Rounded cards
          ),
          margin: const EdgeInsets.all(8),
        ),
        inputDecorationTheme: InputDecorationTheme(
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(12), // Rounded input fields
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: AppColors.primaryColor.withOpacity(0.05), // Light fill color
          contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 15),
          hintStyle: TextStyle(color: AppColors.primaryColor.withOpacity(0.5)),
        ),
        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.deepPurple).copyWith(secondary: AppColors.accentColor),
      ),
      home: StreamBuilder<User?>(
        // Listen to Firebase authentication state changes directly
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          print('StreamBuilder - Connection State: ${snapshot.connectionState}');
          print('StreamBuilder - Has Data: ${snapshot.hasData}');
          print('StreamBuilder - Data (User): ${snapshot.data?.email}');

          // Show a loading indicator while checking auth state
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Scaffold(
              body: Center(
                child: CircularProgressIndicator(color: AppColors.primaryColor), // Consistent color
              ),
            );
          }

          // If user is not logged in, show the login screen
          if (!snapshot.hasData || snapshot.data == null) {
            print('StreamBuilder: User is NOT logged in. Showing LoginScreen.');
            return const LoginScreen();
          }

          // User is logged in, determine their role and navigate to the appropriate dashboard
          final user = snapshot.data!;
          print('StreamBuilder: User is logged in: ${user.email}. Fetching role...');
          return FutureBuilder<UserRole>(
            // Call getUserRole on the instantiated service
            future: _firebaseService.getUserRole(user.uid),
            builder: (context, roleSnapshot) {
              print('FutureBuilder (Role) - Connection State: ${roleSnapshot.connectionState}');
              print('FutureBuilder (Role) - Has Data: ${roleSnapshot.hasData}');
              print('FutureBuilder (Role) - Data (Role): ${roleSnapshot.data}');
              print('FutureBuilder (Role) - Has Error: ${roleSnapshot.hasError}');
              if (roleSnapshot.hasError) {
                print('FutureBuilder (Role) - Error: ${roleSnapshot.error}');
              }


              if (roleSnapshot.connectionState == ConnectionState.waiting) {
                return const Scaffold(
                  body: Center(
                    child: CircularProgressIndicator(color: AppColors.primaryColor), // Consistent color
                  ),
                );
              }
              if (roleSnapshot.hasError) {
                print('Error getting user role in FutureBuilder: ${roleSnapshot.error}');
                // Consider showing a more user-friendly error or a retry option here
                return const LoginScreen(); // Fallback to login on error
              }

              final userRole = roleSnapshot.data ?? UserRole.guest; // Default to guest if role not found
              print('FutureBuilder (Role): User role determined: $userRole. Navigating to dashboard.');

              switch (userRole) {
                case UserRole.host:
                  return const HostDashboardScreen();
                case UserRole.student:
                  return const StudentDashboardScreen();
                case UserRole.guest:
                  return const GuestDashboardScreen();
                default:
                  print('FutureBuilder (Role): Unknown role, falling back to LoginScreen.');
                  return const LoginScreen(); // Fallback
              }
            },
          );
        },
      ),
    );
  }
}
